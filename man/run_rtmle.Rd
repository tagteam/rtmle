% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_rtmle.R
\name{run_rtmle}
\alias{run_rtmle}
\title{Sequential regression with TMLE update step for discretized follow-up data}
\usage{
run_rtmle(
  x,
  targets,
  learner = "learn_glm",
  time_horizon,
  refit = FALSE,
  seed = NULL,
  subsets = NULL,
  keep_influence = TRUE,
  verbose = FALSE,
  ...
)
}
\arguments{
\item{x}{object of class \code{rtmle}}

\item{targets}{Selection of targets to be analysed. If missing all
targets in x$targets are analysed.}

\item{learner}{A function which is called to fit (learn) the
nuisance parameter models.}

\item{time_horizon}{The time horizon at which to calculate
risks. If it is a vector the analysis will be performed for
each element of the vector.}

\item{refit}{Logical. If \code{TRUE} ignore any propensity score
and censoring models learned in previous calls to this
function. Default is \code{FALSE}.}

\item{seed}{Seed used for cross-fitting}

\item{subsets}{A list structure for subset analyses. Each element is a list 
which requires a label, to name the subset, and a subset of the 
variable \code{x$names$id} in the data \code{x$prepared_data} to
identify the subset. The results of the subset analysis are stored
in \code{x$estimate[[subsets[[label]]}. An optional element of each
subset-list is called \code{append}
which should be logical: if \code{TRUE} append the estimates to the existing
estimates with rbind. This may be used for stratified analyses, to study seed dependence (Monte-Carlo error)
and bootstrap. See examples.}

\item{keep_influence}{Logical: if \code{TRUE} store the estimated influence function of the estimator in the object.
Currently this argument is only used when argument \code{subsets} is also specified.}

\item{verbose}{Logical. If \code{FALSE} suppress all messages. \code{FALSE} is the default.}

\item{...}{Additional arguments passed to the learner function.}
}
\value{
The modified object contains the fitted nuisance parameter
    models and the estimate of the target parameter.
}
\description{
This function runs the analysis defined in previous steps.
}
\examples{
# ------------------------------------------------------------------------------------------
# Intervening on a single treatment variable
# ------------------------------------------------------------------------------------------

set.seed(17)
tau <- 3
ld <- simulate_long_data(n = 391,number_visits = 20,
                         beta = list(A_on_Y = -.2,A0_on_Y = -0.3,A0_on_A = 6),
                         register_format = TRUE)
x <- rtmle_init(intervals = tau,name_id = "id",name_outcome = "Y",name_competing = "Dead",
                name_censoring = "Censored",censored_label = "censored")
x <- add_long_data(x,
                   outcome_data=ld$outcome_data,
                   censored_data=ld$censored_data,
                   competing_data=ld$competing_data,
                   timevar_data=ld$timevar_data)
x <- add_baseline_data(x,data=ld$baseline_data)
x <- long_to_wide(x,intervals = seq(0,2000,30.45*12))
x <- protocol(x,name = "Always_A",
                    intervention = data.frame("A" = factor("1",levels = c("0","1"))))
x <- protocol(x,name = "Never_A",
                    intervention = data.frame("A" = factor("0",levels = c("0","1"))))
x <- prepare_data(x)
x <- target(x,name = "Outcome_risk",
                  estimator = "tmle",
                  protocols = c("Always_A","Never_A"))
x <- model_formula(x)
# default is undersmoothing which means: take the smallest penalty
# where the model still converges
x <- run_rtmle(x,learner = "learn_glmnet",time_horizon = 1:tau)
# can also use lambda.min or lambda.1se
\dontrun{
x <- run_rtmle(x,learner = list("glmnet_cv"=list(learner_fun="learn_glmnet",
                                selector="min")),
              time_horizon = tau)
summary(x)
}
\dontrun{
# stratified analyses
x <- run_rtmle(x,learner = "learn_glmnet",time_horizon = tau,
               verbose=FALSE,
               subsets=list(list(label="Sex",variable="Sex",
                                 level="Female",id=x$prepared_data[sex==0,id]),
                       list(label="Sex",variable="Sex",
                                 level="Male",id=x$prepared_data[sex==1,id])))
}



}
\author{
Thomas A Gerds \email{tag@biostat.ku.dk}
}
